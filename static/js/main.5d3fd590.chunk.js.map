{"version":3,"sources":["App.js","Components/product.jsx","Components/Cart.js","header.js","serviceWorker.js","index.js"],"names":["App","props","state","loading","product_item","search","searchSpace","event","keyword","target","value","setState","handleProductInfo","product","e","console","log","history","push","bind","fetch","response","json","data","this","preventDefault","category","hdc","document","getElementsByClassName","i","length","style","display","productJSX","filter","productname","toLowerCase","includes","product_category","map","className","key","productid","onClick","src","links","alt","name","productprice","id","type","placeholder","onChange","handleChangeCategory","React","Component","withRouter","Product","addToCart","cart","JSON","parse","localStorage","getItem","some","item","location","setItem","stringify","alert","fontSize","Cart","totalPrice","parseInt","getAttribute","getElementById","innerHTML","textAlign","width","checkoutCart","SimpleRouting","to","exact","path","component","HomeComponent","ProductComponent","CartComponent","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5d3fd590.chunk.js","sourcesContent":["import React from 'react';\nimport './eshopCSS/homepage.css';\nimport { withRouter } from 'react-router-dom'\n\nclass App extends React.Component{\n  state = {\n      loading:true,\n      product_item: [],\n      search : null\n    };\n    \n    constructor(props){\n      super(props);\n      this.handleProductInfo = this.handleProductInfo.bind(this);\n    }\n    searchSpace=(event)=>{\n      let keyword = event.target.value;\n      this.setState({search:keyword})\n    }\n  \n    async componentDidMount(){\n      const url = \"http://localhost:3000/users\";\n      const response = await fetch(url);\n      const data = await response.json();\n      this.setState({product_item: data, loading: false})\n    }\n\n    \n handleChangeCategory(e){\n  e.preventDefault();\n  var category = e.target.value;\n  console.log(category);\n  var hdc = document.getElementsByClassName('All');\n  for(var i=0;i<hdc.length;i++){\n    hdc[i].style.display=\"none\";\n    }\n    var hdc = document.getElementsByClassName(category);\n\n    for(var i=0;i<hdc.length;i++){\n        hdc[i].style.display=\"block\";\n    }\n  }\n\n  handleProductInfo = (product) => (e) => {\n    console.log(\"jo\");\n    this.props.history.push(\"/product\", {product})\n  }\n\n  render(){\n      if(this.state.loading){         //show loading when data is not fetched from database\n          return <div>loading...</div>;\n        }\n        if(!this.state.product_item.length){\n          return <div>Didn't get the data</div>\n        }\n        const productJSX = this.state.product_item.filter((product)=>{         //function to Filter data by name\n          if(this.state.search == null)\n          return product\n         else if(product.productname.toLowerCase().includes(this.state.search.toLowerCase()) || product.product_category  .toLowerCase().includes(this.state.search.toLowerCase())){\n          return product\n      }\n        }).map(product => (                                           //Mapping data from database\n          <div className={`item-wrap All ${product.product_category=='men'?'Men':'Women'}`} key={product.productid} onClick={this.handleProductInfo(product)}>\n            <img src={product.links} alt=\"Product_Name\" name={product.productid} />\n            <label>Rs.{product.productprice}</label>\n          </div>\n        ));\n      return(\n          <div>\n              <div className= \"container\" id=\"goot\">\n                  <div className=\"side--bar\">\n                    <input type=\"text\" placeholder=\"Enter item to be searched\" onChange={(e)=>this.searchSpace(e)} />\n                    <span>Short by Category:</span>\n                    <select onChange={this.handleChangeCategory}>\n                      <option>All</option>\n                      <option>Men</option>\n                      <option>Women</option>\n                    </select>\n                  </div>\n                  <div className=\"content--wrap\">\n                      {productJSX}\n                  </div>\n              </div>\n          </div>\n      )\n  }\n\n}\n\nexport default withRouter(App);","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass Product extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  \r\n  addToCart = () => {\r\n\r\n    const cart = JSON.parse(localStorage.getItem(\"cart\")) || [];\r\n\r\n    if(!cart.some(item => item.productid === this.props.location.state.product.productid)){\r\n      cart.push(this.props.location.state.product);\r\n    }\r\n\r\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n    alert(\"Item Added to Cart\");\r\n    \r\n  }\r\n\r\n\r\n  render(){\r\n\r\n    const {links, productname, productid, product_category, productprice} = (this.props.location && this.props.location.state && this.props.location.state.product) || {};    \r\n      return(\r\n        <div>\r\n          <div className=\"product_detail--wrap\">\r\n            <div className=\"product--image\">\r\n              <img src={links} alt=\"Product_Name\" />\r\n            </div>\r\n            <div className=\"product_detail\">\r\n              <p><b>Item ID: </b>{productid}</p>\r\n              <p><b>Name: </b>{productname}</p>\r\n              <p><b>Category: </b>{product_category}</p>\r\n              <p style={{fontSize: \"24px\"}}><b>Price: </b>{productprice}</p>\r\n            </div>\r\n          </div>\r\n          <button className=\"addToCart--btn\" onClick={this.addToCart}>Add to Cart</button>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default withRouter(Product);","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass Cart extends React.Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            cart: null,\r\n            totalPrice:null\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        const cart = JSON.parse(localStorage.getItem(\"cart\"));\r\n        this.setState({ cart });\r\n\r\n    }\r\n    checkoutCart(){\r\n        let target = document.getElementsByClassName(\"checkPrice\")\r\n        if(target){\r\n            var totalPrice = 0;\r\n            for(var i=0;i<target.length;i++){\r\n                totalPrice += parseInt(target[i].getAttribute(\"value\"));\r\n            }\r\n            document.getElementById(\"totalValue\").innerHTML=totalPrice;\r\n            document.getElementById(\"totalPrice\").style.display=\"block\";\r\n        }\r\n    }\r\n    render(){\r\n\r\n\r\n        return(\r\n            <div className=\"product_detail\">\r\n\r\n                {\r\n                    ((!this.state.cart) || (this.state.cart && !this.state.cart.length)) && <span>Cart Is empty!!</span>\r\n                }\r\n\r\n                {\r\n                    (this.state.cart && this.state.cart.length) && \r\n                    <div>\r\n                        {\r\n                            this.state.cart.map(item => (\r\n                                <div className=\"cart--container\" key={item.productid}>\r\n                                    <div className=\"cartDetails\">\r\n                                        <div style={{textAlign:\"center\"}}><img src={item.links} alt=\"Product_Image\" style={{width: \"200px\"}} /></div>\r\n                                        <div style={{textAlign:\"left\"}}><b>Product Name: </b> {item.productname}</div>\r\n                                        <div className=\"checkPrice\" style={{textAlign:\"left\"}} value={item.productprice}><b>Product Price: </b> {item.productprice}</div>\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                }\r\n                \r\n                <button className=\"addToCart--btn\" onClick={this.checkoutCart}>Checkout</button>\r\n                <div id=\"totalPrice\" className=\"cart_price\" style={{display:\"none\"}}>Cart Total Price: <span id=\"totalValue\"></span></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(Cart);","import React from \"react\";\r\nimport './eshopCSS/header.css'\r\nimport App from './App';\r\nimport Product from './Components/product';\r\nimport Cart from './Components/Cart';\r\n\r\n\r\nimport { BrowserRouter, Route, Switch, Link, NavLink} from \"react-router-dom\";\r\n\r\nexport default class SimpleRouting extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n   \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n\r\n        <nav className=\"navbar\">\r\n          <NavLink className=\"navbar--list\" style={{\"marginRight\": \"10px\"}} to=\"/\">Home</NavLink>\r\n          <NavLink className=\"navbar--list\" style={{\"marginRight\": \"10px\"}} to=\"/cart\">Cart</NavLink>\r\n        </nav>\r\n        <Route exact path=\"/\" component={HomeComponent} />\r\n        <Route exact path=\"/product\" component={ProductComponent} />\r\n        <Route exact path=\"/cart\" component={CartComponent} />\r\n      </BrowserRouter>\r\n    )\r\n  }\r\n}\r\n\r\nfunction HomeComponent(props) {\r\n   // return \"<div><p>dun dun dun</p><div>\"\r\n    return <App />\r\n}\r\n\r\nfunction ProductComponent() {\r\n  return <Product />\r\n}\r\n\r\nfunction CartComponent() {\r\n  return <Cart />\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SimpleRouting from './header'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SimpleRouting />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}